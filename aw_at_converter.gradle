import java.util.stream.Collectors

task convertAW {
    convertAccessWideners(project(":Common").file("src/main/resources/jeitweaker.accesswidener"))
}

class ATEntry {
    public String modifier
    public final String clazz
    public final String srgName
    public String signature

    ATEntry(String modifier, String clazz, String srgName, String signature) {
        this.modifier = modifier
        this.clazz = clazz
        this.srgName = srgName
        this.signature = signature
    }

    String toString() {
        return modifier + " "  + clazz + " " + srgName + " " + (srgName.startsWith("f_") ? "" : signature)
    }

    void setModifier(String modifier){
        this.modifier = modifier
    }
}

static def convertMojmapToSrg(String fileContents, String mojmap, String signature, String modifier, String clazz, String type) {
    if (type == "method") {
        String toFind = " " + signature + " " + mojmap
        int index = fileContents.indexOf(toFind)
        String result = fileContents.substring(0, index)
        result = result.reverse()
        def srgSplit = result.split("_", 3)
        String finalSrgNumber = "m_" + srgSplit[1].reverse() + "_"
        return new ATEntry(modifier, clazz, finalSrgNumber, signature + " #" + mojmap)
    }
    if (type == "field") {
        int indexOfClass = fileContents.indexOf(clazz + " " + clazz)
        def testString = fileContents.substring(indexOfClass)
        def accurateString = testString.indexOf(mojmap)
        accurateString = testString.substring(0, accurateString)
        accurateString = accurateString.reverse()
        def srgSplit = accurateString.split("_", 3)
        String finalSrg = "f_" + srgSplit[1].reverse() + "_"
        return new ATEntry(modifier, clazz, finalSrg, signature + " #" + mojmap);
    }
    return new ATEntry(modifier, clazz, "INVALID_TYPE_NAME_SUPPLIED", signature);
}

static def getPathFromMinecraftVersion(String version) {
    def homePath = System.properties['user.home'].toString()
    def mcpConfigPath = new File(homePath, "/.gradle/caches/forge_gradle/minecraft_user_repo/de/oceanlabs/mcp/mcp_config")
    if (version == "1.18.2") return new File(new File(mcpConfigPath, "1.18.2-20220404.173914"), "srg_to_official_1.18.2.tsrg")
    if (version == "1.19.2") return new File(new File(mcpConfigPath, "1.19.2-20220805.130853"), "srg_to_official_1.19.2.tsrg")
    return mcpConfigPath
}

def convertAccessWideners(File awPath) {
    println "Attempting to convert accesswidener located at: " +  awPath.toPath()
    def counter = 0

    def fileToReadFrom = getPathFromMinecraftVersion("1.19.2")
    String text = fileToReadFrom.getText("UTF-8")
    text = text.replace("\t", "")
    text = text.replace("\n", "").replace("\r", "");

    Map<String, ATEntry> entryMap = new HashMap<>()
    awPath.eachLine {
        if (counter != 0 || it.contains("#exclude")){
            def splitString = it.split(" ")
            def key = splitString[0] == "accessible" ? "public" : "public-f"
            def type = splitString[1]
            def clazz = splitString[2]
            def mojmapName = splitString[3]
            //target is either the method signature if it's a method or the target type if it's a field
            def target = splitString[4]
            def atEntry = entryMap.get(mojmapName)
            if (atEntry == null) {
                atEntry = convertMojmapToSrg(text, mojmapName, target, key, clazz, type)
                entryMap.put(mojmapName, atEntry)
            }
            else {
                if (atEntry.modifier != "public-f") atEntry.setModifier("public-f")
                entryMap.put(mojmapName, atEntry)
            }
        }
        ++counter
    }
    def atFolderPath = rootProject.file("Forge/src/main/resources/META-INF")
    if (!atFolderPath.exists()) atFolderPath.mkdir()
    //println entryMap.values().stream().map(atEntry -> atEntry.toString()).collect(Collectors.joining(System.lineSeparator()))
    new File(atFolderPath, "accesstransformer.cfg").text = entryMap.values().stream().map(atEntry -> atEntry.toString()).collect(Collectors.joining(System.lineSeparator()))
    println("Successfully wrote ${entryMap.values().size()} AT Entries into our newly generated AT file.")
}
